Directory structure:
└── job_scraper/
    ├── config.py
    ├── data.db
    ├── main.py
    ├── requirements.txt
    ├── database/
    │   ├── __init__.py
    │   ├── db_manager.py
    │   ├── schema.sql
    │   └── __pycache__/
    ├── docs/
    │   ├── Project Duties.docx
    │   └── Project Outline.docx
    ├── scripts/
    │   ├── job_scrape.py
    │   └── .git/
    │       ├── COMMIT_EDITMSG
    │       ├── FETCH_HEAD
    │       ├── HEAD
    │       ├── ORIG_HEAD
    │       ├── config
    │       ├── description
    │       ├── index
    │       ├── packed-refs
    │       ├── hooks/
    │       │   ├── applypatch-msg.sample
    │       │   ├── commit-msg.sample
    │       │   ├── fsmonitor-watchman.sample
    │       │   ├── post-update.sample
    │       │   ├── pre-applypatch.sample
    │       │   ├── pre-commit.sample
    │       │   ├── pre-merge-commit.sample
    │       │   ├── pre-push.sample
    │       │   ├── pre-rebase.sample
    │       │   ├── pre-receive.sample
    │       │   ├── prepare-commit-msg.sample
    │       │   ├── push-to-checkout.sample
    │       │   ├── sendemail-validate.sample
    │       │   └── update.sample
    │       ├── info/
    │       │   └── exclude
    │       ├── logs/
    │       │   ├── HEAD
    │       │   └── refs/
    │       │       ├── heads/
    │       │       │   └── main
    │       │       └── remotes/
    │       │           └── origin/
    │       │               ├── HEAD
    │       │               └── main
    │       ├── objects/
    │       │   ├── 23/
    │       │   │   └── 51532ab156ad1afe1ca3d5f8004bb7e2c91a46
    │       │   ├── 6d/
    │       │   │   └── 206a25899075f7f59a2d06bdd0bceabf7880dd
    │       │   ├── d8/
    │       │   │   └── a81d1df5304b0145c1ef323ef616ac94d4d986
    │       │   ├── info/
    │       │   └── pack/
    │       │       ├── pack-7b21a62a274a97862afb4a04d91cee7e75767462.idx
    │       │       ├── pack-7b21a62a274a97862afb4a04d91cee7e75767462.pack
    │       │       └── pack-7b21a62a274a97862afb4a04d91cee7e75767462.rev
    │       └── refs/
    │           ├── heads/
    │           │   └── main
    │           ├── remotes/
    │           │   └── origin/
    │           │       ├── HEAD
    │           │       └── main
    │           └── tags/
    └── utils/
        ├── __init__.py
        ├── db_utils.py
        ├── logging.py
        └── __pycache__/

================================================
File: config.py
================================================
# config.py

import os

# Database configuration
DATABASE_FILE = 'data.db'
SCHEMA_FILE = os.path.join(os.getcwd(), 'database', 'schema.sql')

# Logging configuration
LOG_DIR = os.path.join(os.getcwd(), 'logs')
LOG_FILE = 'app.log'
LOG_LEVEL = 'INFO'

# API keys and endpoints (placeholders, update with your actual keys)
JSEARCH_API = "22d7e554a0msh4b5224dbea1a4dbp1baac7jsn2197588dd568"
YFINANCE_API_KEY = 'YOUR_YFINANCE_API_KEY'







================================================
File: data.db
================================================



================================================
File: main.py
================================================



================================================
File: requirements.txt
================================================
[Non-text file]


================================================
File: database/__init__.py
================================================



================================================
File: database/db_manager.py
================================================
# db_manager.py

import sqlite3
from utils.db_utils import create_connection, execute_query, execute_read_query

class DBManager:
    def __init__(self, db_file):
        self.db_file = db_file
        self.conn = create_connection(db_file)
    
    def add_job(self, title, company, location, description, ticker, posted_date, similarity_score=None):
        """
        Insert a new job posting into the jobs table.
        """
        query = """
        INSERT INTO jobs (title, company, location, description, ticker, posted_date, similarity_score)
        VALUES (?, ?, ?, ?, ?, ?, ?)
        """
        params = (title, company, location, description, ticker, posted_date, similarity_score)
        return execute_query(self.conn, query, params)
    
    def get_jobs(self, filters=None):
        """
        Retrieve job postings. Optionally accepts a filters dictionary, e.g.,
        {'ticker': 'AAPL', 'location': 'New York'}.
        """
        query = "SELECT * FROM jobs"
        if filters:
            conditions = []
            params = []
            for key, value in filters.items():
                conditions.append(f"{key} = ?")
                params.append(value)
            query += " WHERE " + " AND ".join(conditions)
            return execute_read_query(self.conn, query, params)
        else:
            return execute_read_query(self.conn, query)
    
    def update_similarity(self, job_id, similarity_score):
        """
        Update the similarity score for a given job posting.
        """
        query = "UPDATE jobs SET similarity_score = ? WHERE job_id = ?"
        params = (similarity_score, job_id)
        return execute_query(self.conn, query, params)
    
    def add_or_update_company(self, name, ticker, sector, industry):
        """
        Add a new company or update an existing companyâ€™s details.
        """
        select_query = "SELECT company_id FROM companies WHERE ticker = ?"
        result = execute_read_query(self.conn, select_query, (ticker,))
        if result and len(result) > 0:
            # Update existing record
            query = "UPDATE companies SET name = ?, sector = ?, industry = ? WHERE ticker = ?"
            params = (name, sector, industry, ticker)
        else:
            # Insert new record
            query = "INSERT INTO companies (name, ticker, sector, industry) VALUES (?, ?, ?, ?)"
            params = (name, ticker, sector, industry)
        return execute_query(self.conn, query, params)
    
    def get_company(self, ticker):
        """
        Retrieve company details by ticker.
        """
        query = "SELECT * FROM companies WHERE ticker = ?"
        return execute_read_query(self.conn, query, (ticker,))
    
    def close(self):
        """
        Close the database connection.
        """
        if self.conn:
            self.conn.close()



================================================
File: database/schema.sql
================================================
-- schema.sql

-- Table for storing job postings scraped from the JSearch API.
CREATE TABLE IF NOT EXISTS jobs (
    job_id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    company TEXT NOT NULL,
    location TEXT,
    description TEXT,
    ticker TEXT,
    posted_date TEXT,       -- ISO date string (YYYY-MM-DD) if available
    scraped_date TEXT DEFAULT (datetime('now')), -- Timestamp when the job was scraped
    similarity_score REAL   -- Placeholder for resume-job matching score (to be computed later)
);

-- Table for storing company details using data from the YFinance API.
CREATE TABLE IF NOT EXISTS companies (
    company_id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    ticker TEXT UNIQUE,
    sector TEXT,
    industry TEXT
);

-- Optional table for storing keywords extracted from your resume.
-- This can be used later for resume-job matching using NLP techniques.
CREATE TABLE IF NOT EXISTS resume_keywords (
    keyword_id INTEGER PRIMARY KEY AUTOINCREMENT,
    keyword TEXT NOT NULL,
    frequency INTEGER DEFAULT 0
);

-- Optional table for storing forecasting results.
-- This table is designed to capture predicted job trends by sector and date.
CREATE TABLE IF NOT EXISTS job_forecasts (
    forecast_id INTEGER PRIMARY KEY AUTOINCREMENT,
    sector TEXT,
    forecast_date TEXT,     -- Date for which the forecast applies
    predicted_jobs INTEGER, -- Predicted number of job postings
    created_at TEXT DEFAULT (datetime('now'))
);




================================================
File: docs/Project Duties.docx
================================================
[Non-text file]


================================================
File: docs/Project Outline.docx
================================================
[Non-text file]


================================================
File: scripts/job_scrape.py
================================================
#!/usr/bin/env python3
import os
import time
import requests

from config import JSEARCH_API, DATABASE_FILE  # Removed EMAIL and EMAIL_PASSWORD
from database.db_manager import DBManager

# -------------------
# JSearch API Configuration
# -------------------
API_HOST = "jsearch.p.rapidapi.com"
BASE_URL = "https://jsearch.p.rapidapi.com"
HEADERS = {
    "x-rapidapi-key": JSEARCH_API,
    "x-rapidapi-host": API_HOST
}

# -------------------
# Job Search Parameters
# -------------------
SEARCH_QUERIES = [
    "quantitative trading"
]
SEARCH_LOCATION = "us"
NUM_PAGES = 1

# -------------------
# Retry Configuration
# -------------------
MAX_RETRIES = 3
RETRY_DELAY = 5  # seconds

# -------------------
# Helper Functions
# -------------------
def call_api(endpoint, params):
    """
    Makes an API call with retry logic.
    """
    for attempt in range(MAX_RETRIES):
        try:
            response = requests.get(BASE_URL + endpoint, headers=HEADERS, params=params)
            if response.status_code == 429:
                print("Rate limit hit (429). Waiting for {} seconds...".format(RETRY_DELAY))
                time.sleep(RETRY_DELAY)
                continue
            elif response.status_code != 200:
                print(f"Error: Received status code {response.status_code} for params: {params}")
                return None
            return response
        except Exception as e:
            print("Exception during API call:", e)
            time.sleep(RETRY_DELAY)
    return None

def search_jobs(query, location=SEARCH_LOCATION, num_pages=NUM_PAGES):
    """
    Searches for jobs using the JSearch API's /search endpoint.
    """
    endpoint = "/search"
    all_jobs = []
    for page in range(1, num_pages + 1):
        params = {
            "query": query,
            "page": page,
            "num_pages": num_pages,
            "location": location
        }
        response = call_api(endpoint, params)
        if response is None:
            print(f"Failed to get results for query '{query}', page {page}.")
            continue

        try:
            json_response = response.json()
        except Exception as e:
            print("Error decoding JSON:", e)
            continue

        if json_response.get("status") != "OK":
            error_message = json_response.get("error", {}).get("message", "Unknown error")
            print(f"API error for query '{query}', page {page}: {error_message}")
            continue

        jobs = json_response.get("data", [])
        all_jobs.extend(jobs)
    return all_jobs

# -------------------
# Main Function
# -------------------
def main():
    print("Starting job search for finance/trading/portfolio management/investment positions...")

    # Initialize the database manager
    db_manager = DBManager(DATABASE_FILE)

    overall_jobs = {}

    # Search for each query and store the results in the database
    for query in SEARCH_QUERIES:
        print(f"Searching for jobs with query: '{query}'")
        jobs = search_jobs(query)
        overall_jobs[query] = jobs
        print(f"Found {len(jobs)} jobs for query '{query}'")

        # Process each job and insert into the database
        for job in jobs:
            title = job.get("job_title", "N/A")
            company = job.get("employer_name", "N/A")
            city = job.get("job_city", "")
            country = job.get("job_country", "")
            location_str = f"{city}, {country}" if city or country else "Location not provided"
            description = job.get("job_description", "N/A")
            ticker = job.get("ticker", None)
            posted_date = job.get("posted_date", None)  # Assuming the API provides this field
            similarity_score = None  # Placeholder for later resume-job matching

            # Insert the job posting into the database
            db_manager.add_job(title, company, location_str, description, ticker, posted_date, similarity_score)

    print("Job scraping and database insertion complete.")
    db_manager.close()

if __name__ == "__main__":
    main()



================================================
File: scripts/.git/COMMIT_EDITMSG
================================================
Structure



================================================
File: scripts/.git/FETCH_HEAD
================================================



================================================
File: scripts/.git/HEAD
================================================
ref: refs/heads/main



================================================
File: scripts/.git/ORIG_HEAD
================================================
2351532ab156ad1afe1ca3d5f8004bb7e2c91a46



================================================
File: scripts/.git/config
================================================
[core]
	repositoryformatversion = 0
	filemode = false
	bare = false
	logallrefupdates = true
	symlinks = false
	ignorecase = true
[remote "origin"]
	url = git@github.com:Team-Tu/JobScrape.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "main"]
	remote = origin
	merge = refs/heads/main
	vscode-merge-base = origin/main
	vscode-merge-base = origin/main



================================================
File: scripts/.git/description
================================================
Unnamed repository; edit this file 'description' to name the repository.



================================================
File: scripts/.git/index
================================================
[Non-text file]


================================================
File: scripts/.git/packed-refs
================================================
# pack-refs with: peeled fully-peeled sorted 
411b3591e51439fe9725e800407bdeed77d44d79 refs/remotes/origin/main



================================================
File: scripts/.git/hooks/applypatch-msg.sample
================================================
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:



================================================
File: scripts/.git/hooks/commit-msg.sample
================================================
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}



================================================
File: scripts/.git/hooks/fsmonitor-watchman.sample
================================================
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	my $last_update_line = "";
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
		$last_update_line = qq[\n"since": $last_update_token,];
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {$last_update_line
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}



================================================
File: scripts/.git/hooks/post-update.sample
================================================
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info



================================================
File: scripts/.git/hooks/pre-applypatch.sample
================================================
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:



================================================
File: scripts/.git/hooks/pre-commit.sample
================================================
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff-index --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --



================================================
File: scripts/.git/hooks/pre-merge-commit.sample
================================================
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:



================================================
File: scripts/.git/hooks/pre-push.sample
================================================
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0



================================================
File: scripts/.git/hooks/pre-rebase.sample
================================================
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END



================================================
File: scripts/.git/hooks/pre-receive.sample
================================================
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi



================================================
File: scripts/.git/hooks/prepare-commit-msg.sample
================================================
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi



================================================
File: scripts/.git/hooks/push-to-checkout.sample
================================================
#!/bin/sh

# An example hook script to update a checked-out tree on a git push.
#
# This hook is invoked by git-receive-pack(1) when it reacts to git
# push and updates reference(s) in its repository, and when the push
# tries to update the branch that is currently checked out and the
# receive.denyCurrentBranch configuration variable is set to
# updateInstead.
#
# By default, such a push is refused if the working tree and the index
# of the remote repository has any difference from the currently
# checked out commit; when both the working tree and the index match
# the current commit, they are updated to match the newly pushed tip
# of the branch. This hook is to be used to override the default
# behaviour; however the code below reimplements the default behaviour
# as a starting point for convenient modification.
#
# The hook receives the commit with which the tip of the current
# branch is going to be updated:
commit=$1

# It can exit with a non-zero status to refuse the push (when it does
# so, it must not modify the index or the working tree).
die () {
	echo >&2 "$*"
	exit 1
}

# Or it can make any necessary changes to the working tree and to the
# index to bring them to the desired state when the tip of the current
# branch is updated to the new commit, and exit with a zero status.
#
# For example, the hook can simply run git read-tree -u -m HEAD "$1"
# in order to emulate git fetch that is run in the reverse direction
# with git push, as the two-tree form of git read-tree -u -m is
# essentially the same as git switch or git checkout that switches
# branches while keeping the local changes in the working tree that do
# not interfere with the difference between the branches.

# The below is a more-or-less exact translation to shell of the C code
# for the default behaviour for git's push-to-checkout hook defined in
# the push_to_deploy() function in builtin/receive-pack.c.
#
# Note that the hook will be executed from the repository directory,
# not from the working tree, so if you want to perform operations on
# the working tree, you will have to adapt your code accordingly, e.g.
# by adding "cd .." or using relative paths.

if ! git update-index -q --ignore-submodules --refresh
then
	die "Up-to-date check failed"
fi

if ! git diff-files --quiet --ignore-submodules --
then
	die "Working directory has unstaged changes"
fi

# This is a rough translation of:
#
#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
if git cat-file -e HEAD 2>/dev/null
then
	head=HEAD
else
	head=$(git hash-object -t tree --stdin </dev/null)
fi

if ! git diff-index --quiet --cached --ignore-submodules $head --
then
	die "Working directory has staged changes"
fi

if ! git read-tree -u -m "$commit"
then
	die "Could not update working tree to new HEAD"
fi



================================================
File: scripts/.git/hooks/sendemail-validate.sample
================================================
#!/bin/sh

# An example hook script to validate a patch (and/or patch series) before
# sending it via email.
#
# The hook should exit with non-zero status after issuing an appropriate
# message if it wants to prevent the email(s) from being sent.
#
# To enable this hook, rename this file to "sendemail-validate".
#
# By default, it will only check that the patch(es) can be applied on top of
# the default upstream branch without conflicts in a secondary worktree. After
# validation (successful or not) of the last patch of a series, the worktree
# will be deleted.
#
# The following config variables can be set to change the default remote and
# remote ref that are used to apply the patches against:
#
#   sendemail.validateRemote (default: origin)
#   sendemail.validateRemoteRef (default: HEAD)
#
# Replace the TODO placeholders with appropriate checks according to your
# needs.

validate_cover_letter () {
	file="$1"
	# TODO: Replace with appropriate checks (e.g. spell checking).
	true
}

validate_patch () {
	file="$1"
	# Ensure that the patch applies without conflicts.
	git am -3 "$file" || return
	# TODO: Replace with appropriate checks for this patch
	# (e.g. checkpatch.pl).
	true
}

validate_series () {
	# TODO: Replace with appropriate checks for the whole series
	# (e.g. quick build, coding style checks, etc.).
	true
}

# main -------------------------------------------------------------------------

if test "$GIT_SENDEMAIL_FILE_COUNTER" = 1
then
	remote=$(git config --default origin --get sendemail.validateRemote) &&
	ref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&
	worktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&
	git worktree add -fd --checkout "$worktree" "refs/remotes/$remote/$ref" &&
	git config --replace-all sendemail.validateWorktree "$worktree"
else
	worktree=$(git config --get sendemail.validateWorktree)
fi || {
	echo "sendemail-validate: error: failed to prepare worktree" >&2
	exit 1
}

unset GIT_DIR GIT_WORK_TREE
cd "$worktree" &&

if grep -q "^diff --git " "$1"
then
	validate_patch "$1"
else
	validate_cover_letter "$1"
fi &&

if test "$GIT_SENDEMAIL_FILE_COUNTER" = "$GIT_SENDEMAIL_FILE_TOTAL"
then
	git config --unset-all sendemail.validateWorktree &&
	trap 'git worktree remove -ff "$worktree"' EXIT &&
	validate_series
fi



================================================
File: scripts/.git/hooks/update.sample
================================================
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0



================================================
File: scripts/.git/info/exclude
================================================
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~



================================================
File: scripts/.git/logs/HEAD
================================================
0000000000000000000000000000000000000000 411b3591e51439fe9725e800407bdeed77d44d79 RyLoveQS <rylovequantstats@gmail.com> 1742334043 -0600	clone: from github.com:Team-Tu/JobScrape.git
411b3591e51439fe9725e800407bdeed77d44d79 2351532ab156ad1afe1ca3d5f8004bb7e2c91a46 RyLoveQS <rylovequantstats@gmail.com> 1742334542 -0600	commit: Structure



================================================
File: scripts/.git/logs/refs/heads/main
================================================
0000000000000000000000000000000000000000 411b3591e51439fe9725e800407bdeed77d44d79 RyLoveQS <rylovequantstats@gmail.com> 1742334043 -0600	clone: from github.com:Team-Tu/JobScrape.git
411b3591e51439fe9725e800407bdeed77d44d79 2351532ab156ad1afe1ca3d5f8004bb7e2c91a46 RyLoveQS <rylovequantstats@gmail.com> 1742334542 -0600	commit: Structure



================================================
File: scripts/.git/logs/refs/remotes/origin/HEAD
================================================
0000000000000000000000000000000000000000 411b3591e51439fe9725e800407bdeed77d44d79 RyLoveQS <rylovequantstats@gmail.com> 1742334043 -0600	clone: from github.com:Team-Tu/JobScrape.git



================================================
File: scripts/.git/logs/refs/remotes/origin/main
================================================
411b3591e51439fe9725e800407bdeed77d44d79 2351532ab156ad1afe1ca3d5f8004bb7e2c91a46 RyLoveQS <rylovequantstats@gmail.com> 1742334570 -0600	update by push



================================================
File: scripts/.git/objects/23/51532ab156ad1afe1ca3d5f8004bb7e2c91a46
================================================
[Non-text file]


================================================
File: scripts/.git/objects/6d/206a25899075f7f59a2d06bdd0bceabf7880dd
================================================
[Non-text file]


================================================
File: scripts/.git/objects/d8/a81d1df5304b0145c1ef323ef616ac94d4d986
================================================
[Non-text file]



================================================
File: scripts/.git/objects/pack/pack-7b21a62a274a97862afb4a04d91cee7e75767462.idx
================================================
[Non-text file]


================================================
File: scripts/.git/objects/pack/pack-7b21a62a274a97862afb4a04d91cee7e75767462.pack
================================================
[Non-text file]


================================================
File: scripts/.git/objects/pack/pack-7b21a62a274a97862afb4a04d91cee7e75767462.rev
================================================
[Non-text file]


================================================
File: scripts/.git/refs/heads/main
================================================
2351532ab156ad1afe1ca3d5f8004bb7e2c91a46



================================================
File: scripts/.git/refs/remotes/origin/HEAD
================================================
ref: refs/remotes/origin/main



================================================
File: scripts/.git/refs/remotes/origin/main
================================================
2351532ab156ad1afe1ca3d5f8004bb7e2c91a46




================================================
File: utils/__init__.py
================================================



================================================
File: utils/db_utils.py
================================================
# db_utils.py

import sqlite3
from sqlite3 import Error

def create_connection(db_file):
    """
    Create a database connection to the SQLite database specified by db_file.
    """
    conn = None
    try:
        conn = sqlite3.connect(db_file)
        return conn
    except Error as e:
        print("Connection error:", e)
    return conn

def execute_query(conn, query, params=None):
    """
    Execute a query (INSERT, UPDATE, DELETE) and commit changes.
    """
    try:
        cur = conn.cursor()
        if params:
            cur.execute(query, params)
        else:
            cur.execute(query)
        conn.commit()
        return cur
    except Error as e:
        print("Error executing query:", e)
        return None

def execute_read_query(conn, query, params=None):
    """
    Execute a SELECT query and return fetched results.
    """
    try:
        cur = conn.cursor()
        if params:
            cur.execute(query, params)
        else:
            cur.execute(query)
        result = cur.fetchall()
        return result
    except Error as e:
        print("Error executing read query:", e)
        return None

def initialize_database(db_file, schema_file='schema.sql'):
    """
    Initialize the database using the provided schema file.
    """
    conn = create_connection(db_file)
    if conn is not None:
        try:
            with open(schema_file, 'r') as f:
                sql_script = f.read()
            cur = conn.cursor()
            cur.executescript(sql_script)
            conn.commit()
            print("Database initialized successfully.")
        except Error as e:
            print("Error initializing database:", e)
        finally:
            conn.close()
    else:
        print("Error! Cannot create the database connection.")



================================================
File: utils/logging.py
================================================
# logging_setup.py

import logging
import logging.handlers
import os

def setup_logging(log_dir='logs', log_file='app.log', level=logging.INFO):
    """
    Sets up logging for the application.
    Logs are output to both the console and a rotating file handler.
    """
    # Ensure the log directory exists
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)

    log_path = os.path.join(log_dir, log_file)

    # Create the root logger
    logger = logging.getLogger()
    logger.setLevel(level)

    # Define a common log formatter
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

    # Console handler for output to the terminal
    console_handler = logging.StreamHandler()
    console_handler.setLevel(level)
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)

    # Rotating file handler for saving logs to a file
    file_handler = logging.handlers.RotatingFileHandler(log_path, maxBytes=10*1024*1024, backupCount=5)
    file_handler.setLevel(level)
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)

    return logger



